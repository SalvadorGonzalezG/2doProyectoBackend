            // FUNCIONALIDAD QUE VA A TENER CADA RUTAR
 const asyncHandler = require('express-async-handler') //envoltorio de mi funcion asyncronas si estoy utilizando express para no colocar try catch (MANEJO EX EXCEPCIONES)
 const Tarea = require('../models/tareasModel') //importacion de mi model.

 //definir las funciones que se van a ejecutar cuando mande a llamar una ruta
 
 const getTareas = asyncHandler ( async(req, res) => {
   const tareas = await Tarea.find({ user: req.user._id }) //await del modelo tarea con el metodo find para mostrar todos no colocamos nada en los parentesis.
    res.status(200).json(tareas) //mandar una respuesta en formato json('') con un status.
 })
            //Validación al crear una tarea.
 const createTarea = asyncHandler ( async(req, res) => {
            //console.log(req.body) //recibir datos accediendo al body.
    if(!req.body.texto){ //texto asi se coloco el nombre al probarlo en postman.
        res.status(400)
        throw new Error('No escribiste una descripción más especifica') //lanzar un error
 }
 const tarea = await Tarea.create({
   texto: req.body.texto,
   user: req.user._id //agregando usuario a la tarea.
 })
        res.status(201).json( tarea ) //mandar una respuesta en formato json('') con un status.
})
 
 const updateTarea = asyncHandler( async(req, res) => {
              
   const tarea = await Tarea.findById(req.params.id)

    //verificamos que la tarea existe
    if (!tarea) {
        res.status(400)
        throw new Error("Tarea no encontrada")
    }

    //verificamos que la tarea le pertenece al usuario del token proporcionado
    if (tarea.user.toString() !== req.user.id) {
        res.status(401)
        throw new Error("Acceso no autorizado")
    } else {
        const updatedTarea = await Tarea.findByIdAndUpdate(req.params.id, req.body, { new: true })
        res.status(200).json(updatedTarea)
    }
})

const deleteTarea = asyncHandler(async (req, res) => {

    const tarea = await Tarea.findById(req.params.id)

    if (!tarea) {
        res.status(400)
        throw new Error("Tarea no encontrada")
    }

    //verificamos que la tarea le pertenece al usuario del token proporcionado
    if (tarea.user.toString() !== req.user.id) {
        res.status(401)
        throw new Error("Acceso no autorizado")
    } else {
        await Tarea.deleteOne(tarea)
        //2. const deletedTarea = await Tarea.findByIdAndDelete(req.params.id)
        res.status(200).json({ id: req.params.id })
    }
})

 module.exports = { 
    getTareas,
    createTarea,
    updateTarea,
    deleteTarea
 }